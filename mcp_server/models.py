# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T11:32:18+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, constr


class Arn(
    RootModel[constr(pattern=r'arn:([a-z\d-]+):forecast:.*:.*:.+', max_length=256)]
):
    root: constr(pattern=r'arn:([a-z\d-]+):forecast:.*:.*:.+', max_length=256)


class AttributeName(RootModel[constr(pattern=r'^[a-zA-Z0-9\_\-]+$', max_length=256)]):
    root: constr(pattern=r'^[a-zA-Z0-9\_\-]+$', max_length=256)


class AttributeValue(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class DateTime(RootModel[str]):
    root: str


class Double(RootModel[float]):
    root: float


class Filters(RootModel[Optional[Dict[str, AttributeValue]]]):
    root: Optional[Dict[str, AttributeValue]] = None


class InvalidInputException(RootModel[Any]):
    root: Any


class InvalidNextTokenException(RootModel[Any]):
    root: Any


class LimitExceededException(RootModel[Any]):
    root: Any


class LongArn(
    RootModel[constr(pattern=r'arn:([a-z\d-]+):forecast:.*:.*:.+', max_length=300)]
):
    root: constr(pattern=r'arn:([a-z\d-]+):forecast:.*:.*:.+', max_length=300)


class NextToken(RootModel[constr(min_length=1, max_length=3000)]):
    root: constr(min_length=1, max_length=3000)


class QueryForecastRequest(BaseModel):
    EndDate: Optional[DateTime] = None
    Filters_1: Filters = Field(..., alias='Filters')
    ForecastArn: Arn
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    StartDate: Optional[DateTime] = None


class QueryWhatIfForecastRequest(BaseModel):
    EndDate: Optional[DateTime] = None
    Filters_1: Filters = Field(..., alias='Filters')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    StartDate: Optional[DateTime] = None
    WhatIfForecastArn: LongArn


class ResourceInUseException(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class Statistic(RootModel[constr(max_length=4)]):
    root: constr(max_length=4)


class Timestamp(RootModel[str]):
    root: str


class XAmzTarget(Enum):
    AmazonForecastRuntime_QueryForecast = 'AmazonForecastRuntime.QueryForecast'


class XAmzTarget1(Enum):
    AmazonForecastRuntime_QueryWhatIfForecast = (
        'AmazonForecastRuntime.QueryWhatIfForecast'
    )


class DataPoint(BaseModel):
    Timestamp_1: Optional[Timestamp] = Field(None, alias='Timestamp')
    Value: Optional[Double] = None


class TimeSeries(RootModel[List[DataPoint]]):
    root: List[DataPoint]


class Predictions(RootModel[Optional[Dict[str, TimeSeries]]]):
    root: Optional[Dict[str, TimeSeries]] = None


class Forecast(BaseModel):
    Predictions_1: Optional[Predictions] = Field(None, alias='Predictions')


class QueryForecastResponse(BaseModel):
    Forecast_1: Optional[Forecast] = Field(None, alias='Forecast')


class QueryWhatIfForecastResponse(BaseModel):
    Forecast_1: Optional[Forecast] = Field(None, alias='Forecast')
